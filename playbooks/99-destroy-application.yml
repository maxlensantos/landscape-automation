---
- name: Destroy Juju Model and Controller
  hosts: all
  gather_facts: no
  connection: local

  tasks:
    - name: "Ensure Juju snap is installed before cleanup"
      ansible.builtin.snap:
        name: juju
        classic: yes
      become: yes

    - name: "Attempt to forcefully kill the Juju controller"
      ansible.builtin.command: "sg lxd -c '/snap/bin/juju kill-controller {{ controller_name }} --no-prompt'"
      register: kill_result
      changed_when: "'Destroying controller' in kill_result.stdout"
      # This task is successful if the command succeeds OR if it fails because the controller is already gone.
      failed_when:
        - "kill_result.rc != 0"
        - "'not found' not in kill_result.stderr"
        - "'no controller API addresses' not in kill_result.stderr"
      become: no

    - name: "List all LXD containers"
      ansible.builtin.command: "lxc list --format=json"
      register: lxc_list_json
      changed_when: false
      become: true
      ignore_errors: true

    - name: "Forcefully remove any remaining Juju containers"
      ansible.builtin.command: "lxc delete --force {{ item.name }}"
      loop: "{{ (lxc_list_json.stdout | from_json) | selectattr('name', 'match', '^juju-') }}"
      loop_control:
        label: "{{ item.name }}"
      when: "(lxc_list_json.stdout | from_json) is iterable and lxc_list_json.stdout != ''"
      changed_when: true
      become: true
      ignore_errors: true # This prevents failure if container is already gone

    - name: "Ensure local Juju cache is removed"
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.local/share/juju"
        state: absent
      become: no

    - name: "Display final cleanup message"
      ansible.builtin.debug:
        msg: "Cleanup process completed. The environment is ready for a fresh deployment."
