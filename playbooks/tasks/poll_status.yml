---
# tasks/poll_status.yml

- name: Check Juju status
  ansible.builtin.command: sg lxd -c "juju status --format=json"
  register: juju_status_json
  changed_when: false
  ignore_errors: true

- name: DEBUG - Print Juju status JSON output
  ansible.builtin.debug:
    var: juju_status_json.stdout

- name: Calculate progress and check health
  ansible.builtin.shell:
    cmd: |
      python3 -c '
      import json, sys
      output = {"active": 0, "total": 0, "all_done": False}
      try:
          stdin_content = sys.stdin.read()
          if stdin_content.strip():
              status = json.loads(stdin_content)
              apps = status.get("applications", {})
              if apps:
                  for app_name, app_data in apps.items():
                      if "units" in app_data:
                          app_units = app_data.get("units", {})
                          app_status = app_data.get("application-status", {}).get("current", "unknown")
                          if len(app_units) > 0:
                              output["total"] += len(app_units)
                              if app_status != "active":
                                  continue
                              
                              for unit_data in app_units.values():
                                  workload_ok = unit_data.get("workload-status", {}).get("current") == "active"
                                  agent_ok = unit_data.get("juju-status", {}).get("current") == "idle"
                                  if workload_ok and agent_ok:
                                      output["active"] += 1
          if output["total"] > 0 and output["active"] == output["total"]:
              output["all_done"] = True
      except Exception as e:
          print(f"Health check script failed to parse JSON: {e}", file=sys.stderr)
          pass
      finally:
          print(json.dumps(output))
          sys.exit(0 if output["all_done"] else 1)
      '
    stdin: "{{ juju_status_json.stdout | from_yaml | to_json }}"
  register: health_check_result
  changed_when: false
  failed_when: false # We handle the exit code manually

- name: DEBUG - Python script output and RC
  ansible.builtin.debug:
    msg:
      - "Python script output: {{ health_check_result.stdout }}"
      - "Python script RC: {{ health_check_result.rc }}"
      - "Python script stderr: {{ health_check_result.stderr }}" # Check for errors here

- name: Set completion and progress facts
  ansible.builtin.set_fact:
    all_apps_active: "{{ health_check_result.rc == 0 }}"
    progress_info: "{{ health_check_result.stdout | from_json if health_check_result.stdout != '' else {'active': 0, 'total': 0} }}"
  when: health_check_result is defined

- name: Display progress and live status
  when: not all_apps_active
  ansible.builtin.shell: |
    active_units={{ progress_info.active | default(0) }}
    total_units={{ progress_info.total | default(0) }}

    if [ "$total_units" -gt 0 ]; then
        percent=$((active_units * 100 / total_units))
    else
        percent=0
    fi

    bar_width=40
    completed_width=$((percent * bar_width / 100))
    bar=$(printf "%-${completed_width}s" "" | tr ' ' '‚ùö')$(printf "%-$((bar_width - completed_width))s" "" | tr ' ' '-')

    printf "\033[H\033[J"
    echo "######################################################################"
    echo "#  AGUARDANDO CLUSTER (TENTATIVA {{ retry_num }}/{{ max_iterations }}) - Timeout em ~{{ ((max_iterations - retry_num) * 5 / 60) | round }} min  #"
    echo "######################################################################"
    echo ""
    echo " Progresso: [${bar}] ${percent}% (${active_units}/${total_units} unidades prontas)"
    echo ""

    sg lxd -c "juju status"
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false

- name: Pause for 5 seconds between checks
  when: not all_apps_active
  ansible.builtin.pause:
    seconds: 5