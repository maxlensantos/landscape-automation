--- 
- name: Destroy Juju Model and Controller
  hosts: "{{ groups['lxd_hosts'][0] }}"
  gather_facts: no
  become: no

  tasks:
    - name: Gracefully destroy Juju environment
      block:
        - name: Check if controller exists
          ansible.builtin.command: "juju show-controller {{ controller_name }}"
          register: controller_status
          changed_when: false
          ignore_errors: true

        - name: Get list of machines in the model
          ansible.builtin.command: "juju machines -m {{ controller_name }}:{{ model_name }} --format=json"
          register: machine_list
          changed_when: false
          when: controller_status.rc == 0

        - name: Forcefully remove all machines from the model
          ansible.builtin.command: "juju remove-machine -m {{ controller_name }}:{{ model_name }} {{ item }} --force --no-wait"
          loop: "{{ (machine_list.stdout | from_json)['machines'] | dict2items | map(attribute='key') | list }}"
          when: machine_list.rc == 0 and machine_list.stdout != ''
          changed_when: true

        - name: Attempt to forcefully kill the Juju controller
          ansible.builtin.command: "juju kill-controller {{ controller_name }} --no-prompt"
          changed_when: true
          when: controller_status.rc == 0

      rescue:
        - name: Inform that graceful shutdown failed
          ansible.builtin.debug:
            msg: "Graceful Juju cleanup failed, likely because the controller or model was already gone. Proceeding with forceful cleanup."

    - name: "List all LXD containers on host"
      ansible.builtin.command: "lxc list --format=json"
      register: lxc_list_json
      changed_when: false
      become: true
      ignore_errors: true

    - name: "Forcefully remove any remaining Juju containers"
      ansible.builtin.command: "lxc delete --force {{ item.name }}"
      loop: "{{ (lxc_list_json.stdout | from_json) | selectattr('name', 'match', '^juju-') }}"
      loop_control:
        label: "{{ item.name }}"
      when: "lxc_list_json.stdout is defined and (lxc_list_json.stdout | from_json) is iterable and lxc_list_json.stdout != ''"
      changed_when: true
      become: true
      ignore_errors: true

    - name: "Ensure local Juju cache is removed"
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.local/share/juju"
        state: absent

    - name: "Display final cleanup message"
      ansible.builtin.debug:
        msg: "Cleanup process completed. The environment is ready for a fresh deployment."

